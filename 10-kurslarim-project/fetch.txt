fetch(input, init)
  .then(response => {
    // response işlemleri
  })
  .catch(error => {
    // hata işlemleri
  });

      input: İsteğin yapılacağı kaynak URL'sini temsil eder. Bu parametre bir dize (string) veya bir Request nesnesi olabilir. Bir dize (string) verildiğinde, 
      bu, doğrudan bir URL'ye yapılan GET isteğini temsil eder.

    init (opsiyonel): İsteğin yapılandırma seçeneklerini içeren bir yapılandırma nesnesidir. Bu parametre, istek yöntemi (GET, POST, PUT, DELETE vb.),
     başlık bilgileri, gövde (body) ve diğer istek seçeneklerini belirlemek için kullanılır.

     İsteğin yapılandırma seçenekleri init parametresinde belirtilir ve şu özelliklere sahip olabilir:

    method: İstek yöntemini belirtir (GET, POST, PUT, DELETE vb.).
    headers: İstek başlıklarını belirtir.
    body: İstek gövdesini (verisini) belirtir.
    mode: Ağ işlemlerinin nasıl gerçekleştirileceğini belirtir (örneğin, "cors", "no-cors", "same-origin", "navigate").
    credentials: Kimlik doğrulama bilgilerinin isteğe dahil edilip edilmeyeceğini belirtir (örneğin, "same-origin", "include", "omit").
    cache: Tarayıcı önbelleğinin nasıl kullanılacağını belirtir.
    redirect: Yönlendirmelerin nasıl işleneceğini belirtir (örneğin, "follow", "error", "manual").
    referrer: Referans bilgisini belirtir.
    referrerPolicy: Referans politikasını belirtir.
    integrity: Alınan verinin bütünlüğünü doğrulamak için kullanılan algoritmayı belirtir.



    fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Hata:', error));




const postData = { username: 'example' };

fetch('https://jsonplaceholder.typicode.com/posts', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(postData),
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Hata:', error));

fetch metodunun kullanımı şu şekildedir:

javascript

fetch(input, init)
  .then(response => {
    // response işlemleri
  })
  .catch(error => {
    // hata işlemleri
  });

fetch metodunun iki parametresi vardır:

    input: İsteğin yapılacağı kaynak URL'sini temsil eder. Bu parametre bir dize (string) veya bir Request nesnesi olabilir. Bir dize (string) verildiğinde, bu, doğrudan bir URL'ye yapılan GET isteğini temsil eder.

    init (opsiyonel): İsteğin yapılandırma seçeneklerini içeren bir yapılandırma nesnesidir. Bu parametre, istek yöntemi (GET, POST, PUT, DELETE vb.), başlık bilgileri, gövde (body) ve diğer istek seçeneklerini belirlemek için kullanılır.

İsteğin yapılandırma seçenekleri init parametresinde belirtilir ve şu özelliklere sahip olabilir:

    method: İstek yöntemini belirtir (GET, POST, PUT, DELETE vb.).
    headers: İstek başlıklarını belirtir.
    body: İstek gövdesini (verisini) belirtir.
    mode: Ağ işlemlerinin nasıl gerçekleştirileceğini belirtir (örneğin, "cors", "no-cors", "same-origin", "navigate").
    credentials: Kimlik doğrulama bilgilerinin isteğe dahil edilip edilmeyeceğini belirtir (örneğin, "same-origin", "include", "omit").
    cache: Tarayıcı önbelleğinin nasıl kullanılacağını belirtir.
    redirect: Yönlendirmelerin nasıl işleneceğini belirtir (örneğin, "follow", "error", "manual").
    referrer: Referans bilgisini belirtir.
    referrerPolicy: Referans politikasını belirtir.
    integrity: Alınan verinin bütünlüğünü doğrulamak için kullanılan algoritmayı belirtir.

Örnek kullanımlar:

    GET isteği yapmak:

javascript

fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Hata:', error));

    POST isteği yapmak:

javascript

const postData = { username: 'example' };

fetch('https://jsonplaceholder.typicode.com/posts', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(postData),
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Hata:', error));

Bu örneklerde, fetch metodunu kullanarak bir GET ve bir POST isteği yapılmıştır. İlgili parametreler (örneğin, URL, method, headers ve body)
belirtilmiştir. Sonrasında, gelen yanıt işlenmiştir (response.json() ile) ve sonuç konsola yazdırılmıştır. Eğer bir hata oluşursa, catch bloğu 
çalışır ve hatayı konsola yazdırır.
